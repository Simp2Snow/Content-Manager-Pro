import React, { useState, useEffect } from 'react';
import { Share2, Smartphone, Monitor, Tablet, Calendar, Settings, Plus, X, Check, Eye, Link, Upload, Download, Twitter, Facebook, Instagram, MessageCircle, Zap, Clock, Target, Users, Brain, BarChart3, RefreshCw, Save, Trash2 } from 'lucide-react';

const ContentManager = () => {
  const [activeTab, setActiveTab] = useState('devices');
  const [devices, setDevices] = useState([
    { id: 1, name: 'iPhone 14', type: 'phone', status: 'connected', lastSync: '2 min ago' },
    { id: 2, name: 'MacBook Pro', type: 'laptop', status: 'connected', lastSync: '5 min ago' },
    { id: 3, name: 'iPad Air', type: 'tablet', status: 'offline', lastSync: '1 hour ago' },
    { id: 4, name: 'Work PC', type: 'desktop', status: 'connected', lastSync: '10 min ago' }
  ]);
  
  const [sharedContent, setSharedContent] = useState([
    { id: 1, type: 'file', name: 'Project_Report.pdf', size: '2.3 MB', devices: ['iPhone 14', 'MacBook Pro'], timestamp: '2 hours ago' },
    { id: 2, type: 'link', name: 'Design Inspiration Article', url: 'https://example.com', devices: ['iPad Air', 'Work PC'], timestamp: '1 day ago' },
    { id: 3, type: 'text', name: 'Meeting Notes', preview: 'Key discussion points from client meeting...', devices: ['MacBook Pro', 'Work PC'], timestamp: '3 hours ago' }
  ]);

  const [socialAccounts, setSocialAccounts] = useState([
    { platform: 'Twitter', connected: false, handle: '' },
    { platform: 'Facebook', connected: false, handle: '' },
    { platform: 'Instagram', connected: false, handle: '' },
    { platform: 'Reddit', connected: false, handle: '' },
    { platform: 'LinkedIn', connected: false, handle: '' },
    { platform: 'TikTok', connected: false, handle: '' }
  ]);

  const [profileAnalysis, setProfileAnalysis] = useState(null);
  const [generatedPosts, setGeneratedPosts] = useState([]);
  const [postApprovals, setPostApprovals] = useState({});
  const [scheduledPosts, setScheduledPosts] = useState([]);
  const [manualPost, setManualPost] = useState('');

  const sampleGeneratedPosts = [
    "Just discovered an amazing productivity hack that's completely changed my workflow! Sometimes the simplest solutions are the most effective. #productivity #workflow",
    "Monday motivation: The difference between ordinary and extraordinary is that little 'extra'. What extra step are you taking today? #mondaymotivation #success",
    "Coffee thought: Why do we call it 'rush hour' when nobody's moving? ðŸ˜„ Anyone else stuck in traffic contemplating life's mysteries? #coffee #thoughts",
    "Excited to share some insights from today's project! Collaboration really does make everything better. Team wins are the best wins! #teamwork #collaboration",
    "Weekend vibes: Sometimes disconnecting is the best way to reconnect with what matters most. How are you recharging this weekend? #weekend #balance",
    "Tech tip Tuesday: That moment when you finally understand a concept you've been struggling with. The learning journey never ends! #tech #learning"
  ];

  const pageDescriptions = {
    devices: "Manage and sync content across all your connected devices seamlessly",
    social: "Automate and schedule social media posts with AI-powered content generation",
    analytics: "Track performance and engagement across all your social platforms"
  };

  const handlePostApproval = (postId, approved) => {
    setPostApprovals(prev => ({
      ...prev,
      [postId]: approved
    }));
  };

  const regeneratePosts = () => {
    // Simulate regenerating posts based on previous approvals
    const approvedCount = Object.values(postApprovals).filter(Boolean).length;
    const rejectedCount = Object.values(postApprovals).filter(v => v === false).length;
    
    if (approvedCount + rejectedCount > 0) {
      // In a real app, this would use AI to generate new posts based on preferences
      setGeneratedPosts(sampleGeneratedPosts.map((post, index) => ({
        id: Date.now() + index,
        content: post,
        platforms: ['Twitter', 'Facebook'],
        scheduledTime: null
      })));
    }
  };

  const schedulePost = (postId, platforms, datetime) => {
    const post = generatedPosts.find(p => p.id === postId);
    if (post) {
      setScheduledPosts(prev => [...prev, {
        ...post,
        platforms,
        scheduledTime: datetime,
        status: 'scheduled'
      }]);
    }
  };

  const DeviceIcon = ({ type }) => {
    switch (type) {
      case 'phone': return <Smartphone className="w-5 h-5 text-blue-400" />;
      case 'tablet': return <Tablet className="w-5 h-5 text-purple-400" />;
      case 'laptop':
      case 'desktop': return <Monitor className="w-5 h-5 text-green-400" />;
      default: return <Monitor className="w-5 h-5 text-gray-400" />;
    }
  };

  const SocialIcon = ({ platform }) => {
    switch (platform) {
      case 'Twitter': return <Twitter className="w-5 h-5 text-blue-400" />;
      case 'Facebook': return <Facebook className="w-5 h-5 text-blue-600" />;
      case 'Instagram': return <Instagram className="w-5 h-5 text-pink-500" />;
      case 'Reddit': return <MessageCircle className="w-5 h-5 text-orange-500" />;
      default: return <Share2 className="w-5 h-5 text-gray-400" />;
    }
  };

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header */}
      <div className="bg-gray-900 border-b border-gray-800 px-6 py-4">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
            Content Manager Pro
          </h1>
          <div className="flex space-x-4">
            <button className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700 transition-colors">
              <Settings className="w-5 h-5" />
            </button>
            <button className="px-4 py-2 bg-red-900 hover:bg-red-800 rounded-lg flex items-center gap-2 transition-colors">
              <Plus className="w-4 h-4" />
              Add Content
            </button>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="bg-gray-900 border-b border-gray-800">
        <div className="flex space-x-8 px-6">
          {[
            { id: 'devices', label: 'Device Management', icon: Monitor },
            { id: 'social', label: 'Social Media', icon: Share2 },
            { id: 'analytics', label: 'Analytics', icon: BarChart3 }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center gap-2 px-4 py-4 border-b-2 transition-colors ${
                activeTab === tab.id 
                  ? 'border-blue-400 text-blue-400' 
                  : 'border-transparent text-gray-400 hover:text-white'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Page Description */}
      <div className="text-center py-3 text-xs text-gray-500 bg-gray-900/50">
        {pageDescriptions[activeTab]}
      </div>

      {/* Content */}
      <div className="p-6">
        {activeTab === 'devices' && (
          <div className="space-y-6">
            {/* Connected Devices */}
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <Monitor className="w-5 h-5 text-blue-400" />
                Connected Devices
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {devices.map(device => (
                  <div key={device.id} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div className="flex items-center justify-between mb-2">
                      <DeviceIcon type={device.type} />
                      <div className={`text-xs px-2 py-1 rounded-full ${
                        device.status === 'connected' 
                          ? 'bg-green-900 text-green-400' 
                          : 'bg-red-900 text-red-400'
                      }`}>
                        {device.status}
                      </div>
                    </div>
                    <h3 className="font-medium text-white">{device.name}</h3>
                    <p className="text-xs text-gray-400">Last sync: {device.lastSync}</p>
                  </div>
                ))}
              </div>
            </div>

            {/* Shared Content */}
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <Share2 className="w-5 h-5 text-purple-400" />
                Shared Content
              </h2>
              <div className="space-y-3">
                {sharedContent.map(content => (
                  <div key={content.id} className="bg-gray-800 rounded-lg p-4 border border-gray-700 hover:border-gray-600 transition-colors">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        {content.type === 'file' && <Upload className="w-4 h-4 text-blue-400" />}
                        {content.type === 'link' && <Link className="w-4 h-4 text-green-400" />}
                        {content.type === 'text' && <MessageCircle className="w-4 h-4 text-purple-400" />}
                        <div>
                          <h3 className="font-medium text-white">{content.name}</h3>
                          <p className="text-xs text-gray-400">
                            {content.size && `${content.size} â€¢ `}
                            Synced to {content.devices.length} devices â€¢ {content.timestamp}
                          </p>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <button className="p-2 rounded bg-gray-700 hover:bg-gray-600 transition-colors">
                          <Download className="w-4 h-4" />
                        </button>
                        <button className="p-2 rounded bg-gray-700 hover:bg-gray-600 transition-colors">
                          <Share2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'social' && (
          <div className="space-y-6">
            {/* Social Account Connections */}
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <Link className="w-5 h-5 text-blue-400" />
                Connected Accounts
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {socialAccounts.map((account, index) => (
                  <div key={index} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <SocialIcon platform={account.platform} />
                        <span className="font-medium">{account.platform}</span>
                      </div>
                      <button 
                        onClick={() => {
                          const updated = [...socialAccounts];
                          updated[index].connected = !updated[index].connected;
                          setSocialAccounts(updated);
                        }}
                        className={`text-xs px-3 py-1 rounded-full transition-colors ${
                          account.connected 
                            ? 'bg-green-900 text-green-400 hover:bg-green-800' 
                            : 'bg-gray-700 text-gray-400 hover:bg-gray-600'
                        }`}
                      >
                        {account.connected ? 'Connected' : 'Connect'}
                      </button>
                    </div>
                    {account.connected && (
                      <input 
                        type="text" 
                        placeholder="@username"
                        className="w-full mt-2 px-3 py-1 bg-gray-700 border border-gray-600 rounded text-sm"
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* AI Post Generation */}
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-xl font-semibold flex items-center gap-2">
                  <Brain className="w-5 h-5 text-purple-400" />
                  AI Post Generator
                </h2>
                <div className="flex gap-2">
                  <button 
                    onClick={regeneratePosts}
                    className="px-4 py-2 bg-purple-900 hover:bg-purple-800 rounded-lg flex items-center gap-2 transition-colors"
                  >
                    <RefreshCw className="w-4 h-4" />
                    Regenerate
                  </button>
                  <button className="px-4 py-2 bg-blue-900 hover:bg-blue-800 rounded-lg flex items-center gap-2 transition-colors">
                    <Target className="w-4 h-4" />
                    Analyze Profile
                  </button>
                </div>
              </div>

              {sampleGeneratedPosts.length === 0 ? (
                <div className="text-center py-8 text-gray-400">
                  <Brain className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>Connect your social accounts to generate personalized posts</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {sampleGeneratedPosts.slice(0, 6).map((post, index) => (
                    <div key={index} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                      <p className="text-white mb-3">{post}</p>
                      <div className="flex items-center justify-between">
                        <div className="flex gap-2">
                          <button 
                            onClick={() => handlePostApproval(index, true)}
                            className={`px-3 py-1 rounded-full flex items-center gap-1 text-xs transition-colors ${
                              postApprovals[index] === true 
                                ? 'bg-green-900 text-green-400' 
                                : 'bg-gray-700 text-gray-400 hover:bg-green-900 hover:text-green-400'
                            }`}
                          >
                            <Check className="w-3 h-3" />
                            Approve
                          </button>
                          <button 
                            onClick={() => handlePostApproval(index, false)}
                            className={`px-3 py-1 rounded-full flex items-center gap-1 text-xs transition-colors ${
                              postApprovals[index] === false 
                                ? 'bg-red-900 text-red-400' 
                                : 'bg-gray-700 text-gray-400 hover:bg-red-900 hover:text-red-400'
                            }`}
                          >
                            <X className="w-3 h-3" />
                            Reject
                          </button>
                        </div>
                        <div className="flex gap-2">
                          <button className="p-1 rounded bg-gray-700 hover:bg-gray-600 transition-colors">
                            <Clock className="w-4 h-4 text-blue-400" />
                          </button>
                          <button className="p-1 rounded bg-gray-700 hover:bg-gray-600 transition-colors">
                            <Zap className="w-4 h-4 text-yellow-400" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Manual Post Creation */}
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <MessageCircle className="w-5 h-5 text-green-400" />
                Create Manual Post
              </h2>
              <div className="space-y-4">
                <textarea
                  value={manualPost}
                  onChange={(e) => setManualPost(e.target.value)}
                  placeholder="What's on your mind?"
                  className="w-full h-24 p-3 bg-gray-800 border border-gray-700 rounded-lg resize-none focus:border-blue-400 focus:outline-none"
                />
                <div className="flex items-center justify-between">
                  <div className="flex gap-2 text-xs">
                    <span className="text-gray-400">Post to:</span>
                    {socialAccounts.filter(acc => acc.connected).map((acc, i) => (
                      <label key={i} className="flex items-center gap-1">
                        <input type="checkbox" className="w-3 h-3" />
                        <span>{acc.platform}</span>
                      </label>
                    ))}
                  </div>
                  <div className="flex gap-2">
                    <button className="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg flex items-center gap-2 transition-colors">
                      <Clock className="w-4 h-4" />
                      Schedule
                    </button>
                    <button className="px-4 py-2 bg-blue-900 hover:bg-blue-800 rounded-lg flex items-center gap-2 transition-colors">
                      <Zap className="w-4 h-4" />
                      Post Now
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Scheduled Posts */}
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <Calendar className="w-5 h-5 text-yellow-400" />
                Scheduled Posts
              </h2>
              {scheduledPosts.length === 0 ? (
                <div className="text-center py-8 text-gray-400">
                  <Calendar className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>No scheduled posts yet</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {scheduledPosts.map((post, index) => (
                    <div key={index} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                      <p className="text-white mb-2">{post.content}</p>
                      <div className="flex items-center justify-between text-xs text-gray-400">
                        <span>Scheduled for {post.scheduledTime}</span>
                        <div className="flex gap-2">
                          <button className="p-1 rounded bg-gray-700 hover:bg-gray-600">
                            <Settings className="w-3 h-3" />
                          </button>
                          <button className="p-1 rounded bg-red-900 hover:bg-red-800">
                            <Trash2 className="w-3 h-3" />
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === 'analytics' && (
          <div className="space-y-6">
            <div className="bg-gray-900 rounded-xl p-6 border border-gray-800">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-blue-400" />
                Performance Overview
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                {[
                  { label: 'Total Posts', value: '234', change: '+12%' },
                  { label: 'Engagement Rate', value: '4.8%', change: '+0.3%' },
                  { label: 'Reach', value: '12.5K', change: '+8%' },
                  { label: 'Follower Growth', value: '156', change: '+23%' }
                ].map((stat, index) => (
                  <div key={index} className="bg-gray-800 rounded-lg p-4 border border-gray-700">
                    <p className="text-xs text-gray-400 mb-1">{stat.label}</p>
                    <p className="text-2xl font-bold text-white">{stat.value}</p>
                    <p className="text-xs text-green-400">{stat.change}</p>
                  </div>
                ))}
              </div>
              <div className="h-64 bg-gray-800 rounded-lg border border-gray-700 flex items-center justify-center">
                <div className="text-center text-gray-400">
                  <BarChart3 className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>Analytics charts would be displayed here</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ContentManager;